---

## 🔄 Git Restore, Revert, and Reset — Explained

### 🧩 **1. Restore**

If you’ve made some changes in a file that **haven’t been committed yet** and you want to **discard those uncommitted changes**, you can use the `git restore` command.

#### 💡 Steps:

1. First, check the differences:

   ```bash
   git diff
   ```
2. Then, restore the file to its previous state:

   ```bash
   git restore <file_name>
   ```

> 📝 **Note:**
> `git restore` only works for uncommitted changes. Once changes are committed, this command won’t affect them.

---

### 🔁 **2. Revert**

If you’ve made some changes, **committed them**, and later realize you want to **undo those commits**, use the `git revert` command.

#### 💡 Steps:

1. Check the commit history:

   ```bash
   git log --oneline
   ```
2. Copy the **commit hash** of the commit you want to revert.
3. Run:

   ```bash
   git revert <commit_hash>
   ```

This creates a **new commit** that undoes the changes introduced by the specified commit, without rewriting history.

> 📝 **Note:**
> `git revert` is safe for shared repositories because it doesn’t alter the commit history — it just adds a new commit that reverses the previous one.

---

### ⚙️ **3. Reset**

Now, imagine someone made **7 commits**, and from the **4th commit onward**, the code is incorrect.
The **3rd commit** is the last known good state.

You could use `git revert` four times (to undo commits 4, 5, 6, and 7),
but instead, you can **move the branch pointer** back to the 3rd commit using `git reset`.

#### 💡 Command:

```bash
git reset --soft <commit_hash>
```

or

```bash
git reset --hard <commit_hash>
```

* `--soft` keeps your changes staged.
* `--hard` discards everything after the specified commit (use with caution).

> 🧨 **Warning:**
> `git reset` rewrites history and doesn’t create any log of removed commits.
> This makes it risky, especially for shared repositories.
> Use it only when you’re sure you don’t need the later commits.

---

### ✅ **Summary Table**

| Command       | Used For                       | Affects Commits?          | Safe for Shared Repos? | Description                                  |
| ------------- | ------------------------------ | ------------------------- | ---------------------- | -------------------------------------------- |
| `git restore` | Undo uncommitted changes       | ❌ No                      | ✅ Yes                  | Restores file content before commit          |
| `git revert`  | Undo committed changes         | ✅ Yes (adds a new commit) | ✅ Yes                  | Creates a new commit that reverses changes   |
| `git reset`   | Move HEAD to a previous commit | ✅ Yes (rewrites history)  | ⚠️ No                  | Removes commits from history — use carefully |

---
